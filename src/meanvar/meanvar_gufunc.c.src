//
// meanvar_gufunc.c.src
//
// gufunc to compute the mean and variance simultaneously.
//


//
// int8    float64
// int16   float64
// int32   float64
// int64   float64
// uint8   float64
// uint16  float64
// uint32  float64
// uint64  float64
// float32 float32
// float64 float64
// floatXX floatXX

#define PY_SSIZE_T_CLEAN
#include "Python.h"

#include <stdio.h>
#include <stddef.h>
#include <stdint.h>
#include <math.h>

#define NPY_NO_DEPRECATED_API NPY_API_VERSION
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

#include "../util/ufunc_tools.h"

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc inner loops for integer and floating point types.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/**begin repeat
 * #typename      = int8,    int16,    int32,    int64,     uint8,   uint16,   uint32,   uint64,   float, double, longdouble#
 * #ctype_in      = int8_t,  int16_t,  int32_t,  int64_t,   uint8_t, uint16_t, uint32_t, uint64_t, float, double, long double#
 * #ctype_out     = double*8, float, double, long double#
 * #funcsuffix    = ,,,,,,,, f, , l#
 */


static void meanvar_@typename@_loop(char **args, const npy_intp *dimensions,
                                    const npy_intp* steps, void* data)
{
    char *px = args[0];
    char *pddof = args[1];
    char *pout = args[2];
    npy_intp x_step = steps[0];
    npy_intp ddof_step = steps[1];
    npy_intp out_step = steps[2];
    npy_intp x_inner_step = steps[3];
    npy_intp out_inner_step = steps[4];

    if (dimensions[1] == 0) {
        NPY_ALLOW_C_API_DEF
        NPY_ALLOW_C_API
        PyErr_SetString(PyExc_ValueError,
                        "meanvar requires an input with length at least 1.");
        NPY_DISABLE_C_API
        return;
    }

    for (npy_intp i = 0; i < dimensions[0]; ++i, px += x_step,
                                                 pddof += ddof_step,
                                                 pout += out_step) {
        @ctype_out@ mean = 0.0;
        @ctype_out@ var = 0.0;
        @ctype_out@ c1 = 0.0, m2 = 0.0, c2 = 0.0;
        char *pxk = px;
        for (npy_intp k = 0; k < dimensions[1]; ++k, pxk += x_inner_step) {
            @ctype_out@ y1, t1, y2, t2;
            @ctype_in@ xk = *((@ctype_in@ *) pxk);
            @ctype_out@ delta = xk - mean;
            y1 = delta/(k + 1) - c1;
            t1 = mean + y1;
            c1 = (t1 - mean) - y1;
            mean = t1;

            y2 = delta *(xk - mean) - c2;
            t2 = m2 + y2;
            c2 = (t2 - m2) - y2;
            m2 = t2;
        }
        var = m2 / (dimensions[1] - *((int64_t *) pddof));
        *((@ctype_out@ *) pout) = mean;
        *((@ctype_out@ *) (pout + out_inner_step)) = var;
    }
}

/**end repeat**/


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc configuration data.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// These are the input and return dtypes of meanvar
static char meanvar_typecodes[] = {
    NPY_INT8,       NPY_INT64,  NPY_DOUBLE,
    NPY_UINT8,      NPY_INT64,  NPY_DOUBLE,
    NPY_INT16,      NPY_INT64,  NPY_DOUBLE,
    NPY_UINT16,     NPY_INT64,  NPY_DOUBLE,
    NPY_INT32,      NPY_INT64,  NPY_DOUBLE,
    NPY_UINT32,     NPY_INT64,  NPY_DOUBLE,
    NPY_INT64,      NPY_INT64,  NPY_DOUBLE,
    NPY_UINT64,     NPY_INT64,  NPY_DOUBLE,
    NPY_FLOAT,      NPY_INT64,  NPY_FLOAT,
    NPY_DOUBLE,     NPY_INT64,  NPY_DOUBLE,
    NPY_LONGDOUBLE, NPY_INT64,  NPY_LONGDOUBLE,
};


static PyUFuncGenericFunction meanvar_funcs[] = {
    (PyUFuncGenericFunction) &meanvar_int8_loop,
    (PyUFuncGenericFunction) &meanvar_uint8_loop,
    (PyUFuncGenericFunction) &meanvar_int16_loop,
    (PyUFuncGenericFunction) &meanvar_uint16_loop,
    (PyUFuncGenericFunction) &meanvar_int32_loop,
    (PyUFuncGenericFunction) &meanvar_uint32_loop,
    (PyUFuncGenericFunction) &meanvar_int64_loop,
    (PyUFuncGenericFunction) &meanvar_uint64_loop,
    (PyUFuncGenericFunction) &meanvar_float_loop,
    (PyUFuncGenericFunction) &meanvar_double_loop,
    (PyUFuncGenericFunction) &meanvar_longdouble_loop
};

#define MEANVAR_NTYPES  (sizeof(meanvar_funcs)/sizeof(meanvar_funcs[0]))
static void *meanvar_data[MEANVAR_NTYPES];


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Python extension module definitions.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

static PyMethodDef MeanVarMethods[] = {
        {NULL, NULL, 0, NULL}
};

static struct PyModuleDef moduledef = {
    PyModuleDef_HEAD_INIT,
    .m_name = "_meanvar",
    .m_doc = "Module that defines the meanvar function.",
    .m_size = -1,
    .m_methods = MeanVarMethods
};


#define MEANVAR_DOCSTRING \
"meanvar(x, ddof, ...)\n"                                       \
"\n"                                                            \
"Simultaneous mean and variance calculation for x.\n"           \
"\n"                                                            \
"Parameters\n"                                                  \
"----------\n"                                                  \
"x : array_like\n"                                              \
"    The array for which the statistics are computed.\n"        \
"ddof : int\n"                                                  \
"    The 'delta' degress of freedom; see `numpy.var`.\n"        \
"    `ddof=1` gives the unbiased estimate of the variance.\n"   \
"\n"                                                            \
"Returns\n"                                                     \
"-------\n"                                                     \
"out : ndarray\n"                                               \
"    By default, the last dimension of `out` has length 2;\n"   \
"    the first value is the mean and the second value is the\n" \
"    variance.\n"                                               \
"\n"                                                            \
"Examples\n"                                                    \
"--------\n"                                                    \
">>> import numpy as np\n"                                      \
">>> from ufunclab import meanvar\n"                            \
">>> meanvar([1, 2, 4, 5], 0)\n"                                \
"array([3. , 2.5])\n"                                           \
"\n"                                                            \
"By default, `meanvar` acts on the last dimension of\n"         \
"multidimensional arrays:\n"                                    \
"\n"                                                            \
">>> x = np.array([[1, 4, 4, 2, 1, 1, 2, 7],\n"                 \
"...               [0, 0, 9, 4, 1, 0, 0, 1],\n"                 \
"...               [8, 3, 3, 3, 3, 3, 3, 3],\n"                 \
"...               [5, 5, 5, 5, 5, 5, 5, 5]])\n"                \
">>> meanvar(x, 1)\n"                                           \
"array([[ 2.75 ,  4.5  ],\n"                                    \
"       [ 1.875, 10.125],\n"                                    \
"       [ 3.625,  3.125],\n"                                    \
"       [ 5.   ,  0.   ]])\n"                                   \
"\n"                                                            \
"The `axes` parameter can be used to change the axes on\n"      \
"which the function operates.  For example, to compute the\n"   \
"mean and variance along the first axis, but leave the result\n"\
"(i.e. the mean and variance pairs) in the last dimension\n"    \
"of the output, use `axes=[0, (), 1]`:\n"                       \
"\n"                                                            \
">>> meanvar(x, 1, axes=[0, (), 1])\n"                          \
"array([[ 3.5       , 13.66666667],\n"                          \
"       [ 3.        ,  4.66666667],\n"                          \
"       [ 5.25      ,  6.91666667],\n"                          \
"       [ 3.5       ,  1.66666667],\n"                          \
"       [ 2.5       ,  3.66666667],\n"                          \
"       [ 2.25      ,  4.91666667],\n"                          \
"       [ 2.5       ,  4.33333333],\n"                          \
"       [ 4.        ,  6.66666667]])\n"                         \
"\n"


PyMODINIT_FUNC PyInit__meanvar(void)
{
    PyObject *module;

    module = PyModule_Create(&moduledef);
    if (module == NULL) {
        return NULL;
    }

    import_array();
    import_umath();

    // Create the meanvar ufunc.
    if (ul_define_gufunc(module, "meanvar", MEANVAR_DOCSTRING, "(i),()->(2)",
                         MEANVAR_NTYPES,
                         meanvar_funcs, meanvar_data, meanvar_typecodes) < 0) {
        Py_DECREF(module);
        return NULL;
    }

    return module;
}
