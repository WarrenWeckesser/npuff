//
// vnorm_gufunc.c.src
//
// gufunc implementation of the vector norm.
//

#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

#define NPY_NO_DEPRECATED_API NPY_API_VERSION

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#include "math.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc inner loops for floating point types.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/**begin repeat
 * #typename      = float, double, longdouble#
 * #ctype         = float, double, long double#
 * #c             = f,,l#
 * #C             = F,,L#
 */

static void vnorm_@typename@_loop(char **args, npy_intp *dimensions,
                                  npy_intp* steps, void* data)
{
    // dimensions[0]: Number of input arrays
    // dimensions[1]: Length of each array
    // steps[0]:  x array step
    // steps[1]:  order array step
    // steps[2]:  output array step
    char *px = args[0];
    char *porder = args[1];
    char *pout = args[2];
    npy_intp nloops = dimensions[0];

    for (int j = 0; j < nloops; ++j, px += steps[0], porder += steps[1],
                                     pout += steps[2]) {
        @ctype@ sum = 0;
        @ctype@ maxabsx = 0;
        @ctype@ order = *((@ctype@ *) porder);
        if (order <= 0) {
            ((@ctype@ *) pout)[0] = NPY_NAN;
            continue;
        }

        for (int k = 0; k < dimensions[1]; ++k) {
            @ctype@ current_x = ((@ctype@ *) px)[k];
            if (current_x < 0) {
                current_x = -current_x;
            }
            if (current_x > maxabsx) {
                maxabsx = current_x;
            }
        }
        if (maxabsx == 0) {
            ((@ctype@ *) pout)[0] = 0;
        }
        else {
            for (int k = 0; k < dimensions[1]; ++k) {
                @ctype@ current_x = ((@ctype@ *) px)[k];
                if (current_x < 0) {
                    current_x = -current_x;
                }
                if (npy_isinf(order)) {
                    sum = fmax@c@(sum, current_x);
                }
                else if (order == 1) {
                    sum += current_x;
                }
                else {
                    sum += pow@c@(current_x/maxabsx, order);
                }
            }
            if (npy_isinf(order) | (order == 1)) {
                ((@ctype@ *) pout)[0] = sum;
            }
            else {
                ((@ctype@ *) pout)[0] = maxabsx * pow@c@(sum, 1/order);
            }
        }
    }
}

/**end repeat**/


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc configuration data.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// These are the input and return dtypes of vnorm.
static char types[] = {
    NPY_FLOAT, NPY_FLOAT, NPY_FLOAT,
    NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE,
    NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE
};

PyUFuncGenericFunction vnorm_funcs[] = {
    &vnorm_float_loop,
    &vnorm_double_loop,
    &vnorm_longdouble_loop
};

static void *vnorm_data[sizeof(vnorm_funcs)/sizeof(vnorm_funcs[0])];


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Python extension module definitions.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

static PyMethodDef VNormMethods[] = {
        {NULL, NULL, 0, NULL}
};

static struct PyModuleDef moduledef = {
    PyModuleDef_HEAD_INIT,
    .m_name = "_vnorm",
    .m_doc = "Module that defines the vnorm function.",
    .m_size = -1,
    .m_methods = VNormMethods
};


#define VNORM_DOCSTRING \
"vnorm(x, order)\n"                                         \
"\n"                                                        \
"Compute the vector norm of the input signal x.\n"          \
"\n"                                                        \
"Parameters\n"                                              \
"----------\n"                                              \
"x : array_like\n"                                          \
"    Input array\n"                                         \
"order : scalar or array_like\n"                            \
"    Order of the norm to be computed (e.g. order=2 is\n"   \
"    the standard Euclidean norm). Must be greater\n"       \
"    than 0.\n"                                             \
"\n"                                                        \
"Returns\n"                                                 \
"-------\n"                                                 \
"out : ndarray\n"                                           \
"    Vector norm(s) of the input.\n"                        \
"\n"                                                        \
"Examples\n"                                                \
"--------\n"                                                \
">>> x = np.array([30.0, 40.0])\n"                          \
">>> vnorm(x, 2.0)\n"                                       \
"50.0\n"                                                    \
"\n"

PyMODINIT_FUNC PyInit__vnorm(void)
{
    PyObject *m;
    PyUFuncObject *vnorm_gufunc;
    PyObject *d;
    size_t ntypes;
    int nin, nout;

    m = PyModule_Create(&moduledef);
    if (!m) {
        return NULL;
    }

    import_array();
    import_umath();

    // Create the vnorm ufunc.
    ntypes = sizeof(vnorm_funcs) / sizeof(vnorm_funcs[0]);
    nin = 2;
    nout = 1;
    vnorm_gufunc = (PyUFuncObject *) PyUFunc_FromFuncAndDataAndSignature(
                        vnorm_funcs, vnorm_data, types, ntypes, nin, nout,
                        PyUFunc_None, "vnorm",
                        VNORM_DOCSTRING, 0, "(i),()->()");

    d = PyModule_GetDict(m);
    PyDict_SetItemString(d, "vnorm", (PyObject *) vnorm_gufunc);
    Py_DECREF(vnorm_gufunc);

    return m;
}
