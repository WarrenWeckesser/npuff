//
// trapezoid_pulse_ufunc.c.src
//
// ufunc implementation of trapezoid_pulse(x, a, b, c, d, amp)
//

#define PY_SSIZE_T_CLEAN
#include "Python.h"

#include <stddef.h>
#include <stdint.h>

#define NPY_NO_DEPRECATED_API NPY_API_VERSION
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc inner loops for floating point types.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/**begin repeat
 * #typename      = float, double, longdouble#
 * #ctype         = float, double, long double#
 */

static void
trapezoid_pulse_@typename@_loop(char **args, const npy_intp *dimensions,
                                const npy_intp* steps, void* data)
{
    // args[0]: pointer to x array
    // args[1]: pointer to a array
    // args[2]: pointer to b array
    // args[3]: pointer to c array
    // args[4]: pointer to d array
    // args[5]: pointer to amp array
    // args[6]: pointer to output array
    // dimensions[0]: Length of each array
    // steps[0]:  x array step
    // steps[1]:  a array step
    // steps[2]:  b array step
    // steps[3]:  c array step
    // steps[4]:  d array step
    // steps[5]:  amp array step
    // steps[6]:  output array step
    char *px = args[0];
    char *pa = args[1];
    char *pb = args[2];
    char *pc = args[3];
    char *pd = args[4];
    char *pamp = args[5];
    char *pout = args[6];
    npy_intp n = dimensions[0];

    for (int j = 0; j < n; ++j, px += steps[0], pa += steps[1], pb += steps[2], pc += steps[3],
                                pd += steps[4], pamp += steps[5], pout += steps[6]) {
        @ctype@ x = *((@ctype@ *) px);
        @ctype@ a = *((@ctype@ *) pa);
        @ctype@ b = *((@ctype@ *) pb);
        @ctype@ c = *((@ctype@ *) pc);
        @ctype@ d = *((@ctype@ *) pd);
        @ctype@ amp = *((@ctype@ *) pamp);
        @ctype@ result;
        if (!((a <= b) && (b <= c) && (c <= d))) {
            result = NAN;
        }
        else {
            if ((x <= a) || (x >= d)) {
                result = 0.0;
            }
            else if ((x >= b) && (x <= c)) {
                result = amp;
            }
            else if (x < b) {
                result = amp*((x - a)/(b - a));
            }
            else {
                result = amp*((d - x)/(d - c));
            }
        }
        *((@ctype@ *) pout) = result;
    }
}

/**end repeat**/


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc configuration data.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// These are the input and return dtypes of deadzone.
static char types[] = {
    NPY_FLOAT,      NPY_FLOAT,      NPY_FLOAT,      NPY_FLOAT,      NPY_FLOAT,      NPY_FLOAT,      NPY_FLOAT,
    NPY_DOUBLE,     NPY_DOUBLE,     NPY_DOUBLE,     NPY_DOUBLE,     NPY_DOUBLE,     NPY_DOUBLE,     NPY_DOUBLE,
    NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE
};

static PyUFuncGenericFunction trapezoid_pulse_funcs[] = {
    (PyUFuncGenericFunction) &trapezoid_pulse_float_loop,
    (PyUFuncGenericFunction) &trapezoid_pulse_double_loop,
    (PyUFuncGenericFunction) &trapezoid_pulse_longdouble_loop
};

static void *trapezoid_pulse_data[sizeof(trapezoid_pulse_funcs)/sizeof(trapezoid_pulse_funcs[0])];


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Python extension module definitions.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

static PyMethodDef TrapezoidPulseMethods[] = {
        {NULL, NULL, 0, NULL}
};

static struct PyModuleDef moduledef = {
    PyModuleDef_HEAD_INIT,
    .m_name = "_trapezoid_pulse",
    .m_doc = "Module that defines the trapezoid_pulse function.",
    .m_size = -1,
    .m_methods = TrapezoidPulseMethods
};


#define TRAPEZOID_PULSE_DOCSTRING \
"trapezoid_pulse(x, a, b, c, d, amp, /, ...)\n"             \
"\n"                                                        \
"Trapezoid pulse function.\n"                               \
"\n"                                                        \
"Parameters\n"                                              \
"----------\n"                                              \
"x : array_like\n"                                          \
"    Input signal\n"                                        \
"a : array_like\n"                                          \
"    Start of rising ramp\n"                                \
"b : array_like\n"                                          \
"    End of rising ramp, start of plateau\n"                \
"c : array_like\n"                                          \
"    End of plateau, start of falling ramp\n"               \
"d : array_like\n"                                          \
"    End of falling ramp\n"                                 \
"amp : array_like\n"                                        \
"    Height of the plateau\n"                               \
"\n"                                                        \
"Returns\n"                                                 \
"-------\n"                                                 \
"out : ndarray\n"                                           \
"    Output of the trapezoid pulse function.\n"             \
"\n"                                                        \
"Notes\n"                                                   \
"-----\n"                                                   \
"The function requires ``a <= b <= c <= d``.  If this condition\n"  \
"is not satisfied, nan is returned.\n"                              \
"\n"                                                                \
"Examples\n"                                                        \
"--------\n"                                                        \
">>> import numpy as np\n"                                          \
">>> from ufunclab import trapezoid_pulse\n"                        \
">>> x = np.linspace(0, 6, 17)\n"                                   \
">>> trapezoid_pulse(x, 1, 3, 4, 5)\n"                              \
"array([...])\n"                                                    \
"\n"

PyMODINIT_FUNC PyInit__trapezoid_pulse(void)
{
    PyObject *m;
    PyUFuncObject *trapezoid_pulse_ufunc;
    size_t ntypes;
    int nin, nout;
    int status;

    m = PyModule_Create(&moduledef);
    if (!m) {
        return NULL;
    }

    import_array();
    import_umath();

    // Create the deadzone ufunc.
    ntypes = sizeof(trapezoid_pulse_funcs) / sizeof(trapezoid_pulse_funcs[0]);
    nin = 6;
    nout = 1;
    trapezoid_pulse_ufunc = (PyUFuncObject *) PyUFunc_FromFuncAndData(
                                    trapezoid_pulse_funcs, trapezoid_pulse_data,
                                    types, ntypes, nin, nout,
                                    PyUFunc_None, "trapezoid_pulse",
                                    TRAPEZOID_PULSE_DOCSTRING, 0);
    if (trapezoid_pulse_ufunc == NULL) {
        Py_DECREF(m);
        return NULL;
    }
    status = PyModule_AddObject(m, "trapezoid_pulse", (PyObject *) trapezoid_pulse_ufunc);
    if (status == -1) {
        Py_DECREF(trapezoid_pulse_ufunc);
        Py_DECREF(m);
        return NULL;
    }

    return m;
}
