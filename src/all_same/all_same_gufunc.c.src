//
// all_same_gufunc.c.src
//
// Extension module for the all_same gufunc.
//

#define PY_SSIZE_T_CLEAN
#include "Python.h"

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

#define NPY_NO_DEPRECATED_API NPY_API_VERSION
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

#include "../util/ufunc_tools.h"


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc inner loops for integer and floating point types.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/**begin repeat
 * #typename      = int8,    int16,    int32,    int64,     uint8,   uint16,   uint32,   uint64,   float, double, longdouble#
 * #ctype_in      = int8_t,  int16_t,  int32_t,  int64_t,   uint8_t, uint16_t, uint32_t, uint64_t, float, double, long double#
 */


static void all_same_@typename@_loop(char **args, const npy_intp *dimensions,
                                     const npy_intp* steps, void* data)
{
    char *in = args[0];
    char *out = args[1];
    npy_intp in_step = steps[0];
    npy_intp out_step = steps[1];
    npy_intp inner_step = steps[2];

    for (npy_intp i = 0; i < dimensions[0]; ++i, in += in_step, out += out_step) {
        *(npy_bool *) out = true;
        if (dimensions[1] > 1) {
            char *inner = in;
            @ctype_in@ first = *(@ctype_in@ *) inner;
            inner += inner_step;
            for (npy_intp k = 1; k < dimensions[1]; ++k, inner += inner_step) {
                @ctype_in@ x = *(@ctype_in@ *)inner;
                if (x != first) {
                    *(npy_bool *) out = false;
                    break;
                }
            }
        }
    }
}
/**end repeat**/


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc inner loop for object arrays.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

static void all_same_object_loop(char **args, const npy_intp *dimensions,
                                 const npy_intp* steps, void* data)
{
    char *in = args[0];
    char *out = args[1];
    npy_intp in_step = steps[0];
    npy_intp out_step = steps[1];
    npy_intp core_in_step = steps[2];

    for (npy_intp i = 0; i < dimensions[0]; ++i, in += in_step, out += out_step) {
        *(npy_bool *) out = true;
        if (dimensions[1] > 1) {
            char *inner = in;
            PyObject *first = *(PyObject **) inner;
            inner += core_in_step;
            for (npy_intp k = 1; k < dimensions[1]; ++k, inner += core_in_step) {
                PyObject *x = *(PyObject **) inner;
                int ne = PyObject_RichCompareBool(x, first, Py_NE);
                if (ne == -1) {
                    return;
                }
                if (ne == 1) {
                    *(npy_bool *) out = false;
                    break;
                }
            }
        }
    }
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc configuration data.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// These are the input and return dtypes of all_same.
static char all_same_typecodes[] = {
    NPY_INT8,       NPY_BOOL,
    NPY_UINT8,      NPY_BOOL,
    NPY_INT16,      NPY_BOOL,
    NPY_UINT16,     NPY_BOOL,
    NPY_INT32,      NPY_BOOL,
    NPY_UINT32,     NPY_BOOL,
    NPY_INT64,      NPY_BOOL,
    NPY_UINT64,     NPY_BOOL,
    NPY_FLOAT,      NPY_BOOL,
    NPY_DOUBLE,     NPY_BOOL,
    NPY_LONGDOUBLE, NPY_BOOL,
    NPY_DATETIME,   NPY_BOOL,
    NPY_TIMEDELTA,  NPY_BOOL,
    NPY_OBJECT,     NPY_BOOL
};

static PyUFuncGenericFunction all_same_funcs[] = {
    (PyUFuncGenericFunction) &all_same_int8_loop,
    (PyUFuncGenericFunction) &all_same_uint8_loop,
    (PyUFuncGenericFunction) &all_same_int16_loop,
    (PyUFuncGenericFunction) &all_same_uint16_loop,
    (PyUFuncGenericFunction) &all_same_int32_loop,
    (PyUFuncGenericFunction) &all_same_uint32_loop,
    (PyUFuncGenericFunction) &all_same_int64_loop,
    (PyUFuncGenericFunction) &all_same_uint64_loop,
    (PyUFuncGenericFunction) &all_same_float_loop,
    (PyUFuncGenericFunction) &all_same_double_loop,
    (PyUFuncGenericFunction) &all_same_longdouble_loop,
    (PyUFuncGenericFunction) &all_same_int64_loop,
    (PyUFuncGenericFunction) &all_same_int64_loop,
    (PyUFuncGenericFunction) &all_same_object_loop
};

#define ALL_SAME_NTYPES (sizeof(all_same_funcs)/sizeof(all_same_funcs[0]))
static void *all_same_data[ALL_SAME_NTYPES];


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Python extension module definitions.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

static PyMethodDef AllSameMethods[] = {
        {NULL, NULL, 0, NULL}
};

static struct PyModuleDef moduledef = {
    PyModuleDef_HEAD_INIT,
    .m_name = "_all_same",
    .m_doc = "Module that defines the all_same function.",
    .m_size = -1,
    .m_methods = AllSameMethods
};


#define ALL_SAME_DOCSTRING \
"all_same(x, /, ...)\n"                     \
"\n"                                        \
"Test for all values being the same."


PyMODINIT_FUNC PyInit__all_same(void)
{
    PyObject *module;

    module = PyModule_Create(&moduledef);
    if (!module) {
        return NULL;
    }

    import_array();
    import_umath();

    // Create the all_same ufunc.
    if (ul_define_gufunc(module, "all_same", ALL_SAME_DOCSTRING, "(i)->()",
                         ALL_SAME_NTYPES,
                         all_same_funcs, all_same_data, all_same_typecodes) < 0) {
        Py_DECREF(module);
        return NULL;
    }

    return module;
}
