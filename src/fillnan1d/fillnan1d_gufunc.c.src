//
// fillnan1d_gufunc.c.src
//
// gufunc implementation of fillnan1d(x)
//
// Replace `nan` in `x` by using linear interpolation.
// `nan` values at either end of `x` are replaced by the nearest non-`nan` value.
// An array of all `nan` is returned as all `nan`.
//

#define PY_SSIZE_T_CLEAN
#include "Python.h"

#include <stddef.h>
#include <stdint.h>

#define NPY_NO_DEPRECATED_API NPY_API_VERSION
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

#include "../src/util/ufunc_tools.h"


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc inner loops for floating point types.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/**begin repeat
 * #typename      = float, double, longdouble#
 * #ctype         = float, double, long double#
 */

static void fillnan1d_@typename@_loop(char **args, const npy_intp *dimensions,
                                      const npy_intp* steps, void* data)
{
    // dimensions[0]: Number of input arrays
    // dimensions[1]: Length of each array
    // steps[0]:  x array step
    // steps[1]:  output array step
    // steps[2]:  inner x array step
    // steps[3]:  inner output array step
    char *px = args[0];
    char *pout = args[1];
    npy_intp nloops = dimensions[0];

    for (int j = 0; j < nloops; ++j, px += steps[0], pout += steps[1]) {
        // Find first non-nan.
        npy_intp k = 0;
        while (k < dimensions[1]) {
            @ctype@ x = *((@ctype@ *) (px + k*steps[2]));
            if (!isnan(x)) {
                break;
            }
            ++k;
        }
        if (k == dimensions[1]) {
            // All values are nan.  Fill output with nan.
            for (int i = 0; i < dimensions[1]; ++i) {
                *((@ctype@ *) (pout + i*steps[3])) = NAN;
            }
        }
        else {
            // Replace any initial nan values with the first non-nan value.
            @ctype@ left_value = *((@ctype@ *) (px + k*steps[2]));
            npy_intp left_index = k;
            for (npy_intp i = 0; i <= k; ++i) {
                *((@ctype@ *) (pout + i*steps[3])) = left_value;
            }
            for (npy_intp k = left_index + 1; k < dimensions[1]; ++k) {
                @ctype@ x = *((@ctype@ *) (px + k*steps[2]));
                if (!isnan(x)) {
                    *((@ctype@ *) (pout + k*steps[3])) = x;
                    if (left_index != k - 1) {
                        long double slope = ((long double) x - (long double) left_value)/(k - left_index);
                        for (npy_intp i = 1; i < k - left_index; ++i) {
                            *((@ctype@ *) (pout + (left_index + i)*steps[3])) = left_value + i*slope;
                        }
                    }
                    left_value = x;
                    left_index = k;
                }
            }
            if (left_index != dimensions[1]) {
                // Handle nan values at the right end.
                for (npy_intp i = left_index + 1; i < dimensions[1]; ++i) {
                    *((@ctype@ *) (pout + i*steps[3])) = left_value;
                }
            }
        }
    }
}

/**end repeat**/


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc configuration data.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// These are the input and return dtypes of fillnan1d.
static char fillnan1d_typecodes[] = {
    NPY_FLOAT, NPY_FLOAT,
    NPY_DOUBLE, NPY_DOUBLE,
    NPY_LONGDOUBLE, NPY_LONGDOUBLE
};

static PyUFuncGenericFunction fillnan1d_funcs[] = {
    (PyUFuncGenericFunction) &fillnan1d_float_loop,
    (PyUFuncGenericFunction) &fillnan1d_double_loop,
    (PyUFuncGenericFunction) &fillnan1d_longdouble_loop
};

#define FILLNAN1D_NTYPES (sizeof(fillnan1d_funcs)/sizeof(fillnan1d_funcs[0]))
static void *fillnan1d_data[FILLNAN1D_NTYPES];


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Python extension module definitions.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

static PyMethodDef FillNan1DMethods[] = {
        {NULL, NULL, 0, NULL}
};

static struct PyModuleDef moduledef = {
    PyModuleDef_HEAD_INIT,
    .m_name = "_fillnan1d",
    .m_doc = "Module that defines the fillnan1d function.",
    .m_size = -1,
    .m_methods = FillNan1DMethods
};


#define FILLNAN1D_DOCSTRING \
"fillnan1d(x, /, ...)\n"                  \
"\n"                                                        \
"Replace `nan` in `x` by using linear interpolation.\n"     \
"`nan` values at either end of `x` are replaced by the\n"   \
"nearest non-`nan` value.\n"                                \
"An array of all `nan` is returned as all `nan`.\n"         \
"\n"                                                        \
"Parameters\n"                                              \
"----------\n"                                              \
"x : array_like\n"                                          \
"    Input array\n"                                         \
"\n"                                                        \
"Returns\n"                                                 \
"-------\n"                                                 \
"out : ndarray\n"                                           \
"    Output array, with `nan` values replaced.\n"           \
"\n"                                                        \
"Examples\n"                                                \
"--------\n"                                                \
">>> import numpy as np\n"                                  \
">>> from ufunclab import fillnan1d\n"                      \
">>> x = np.array([1, np.nan, 1.5, 2.0, np.nan])\n"         \
">>> fillnan1d(x)\n"                                        \
"array([1.  , 1.25, 1.5 , 2.  , 2.  ])\n"                   \
"\n"

PyMODINIT_FUNC PyInit__fillnan1d(void)
{
    PyObject *module;

    module = PyModule_Create(&moduledef);
    if (!module) {
        return NULL;
    }

    import_array();
    import_umath();

    // Create the fillnan1d ufunc.
    if (ul_define_gufunc(module, "fillnan1d", FILLNAN1D_DOCSTRING, "(i)->(i)",
                         FILLNAN1D_NTYPES,
                         fillnan1d_funcs, fillnan1d_data, fillnan1d_typecodes) == NULL) {
        Py_DECREF(module);
        return NULL;
    }

    return module;
}
