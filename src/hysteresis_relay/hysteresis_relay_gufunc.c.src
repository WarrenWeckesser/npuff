//
// hysteresis_relay_gufunc.c.src
//
// gufunc implementation of hysteresis_relay(x, low_threshold, high_threshold,
//                                           low_value, high_value, init)
//

#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

#define NPY_NO_DEPRECATED_API NPY_API_VERSION

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#include "math.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc inner loops for floating point types.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/**begin repeat
 * #typename      = float, double, longdouble#
 * #ctype         = float, double, long double#
 */

static void hysteresis_relay_@typename@_loop(char **args, npy_intp *dimensions,
                                             npy_intp* steps, void* data)
{
    // dimensions[0]: Number of input arrays
    // dimensions[1]: Length of each array
    // steps[0]:  x array step
    // steps[1]:  low_threshold array step
    // steps[2]:  high_threshold array step
    // steps[3]:  low_value array step
    // steps[4]:  high_value array step
    // steps[5]:  init array step
    // steps[6]:  output array step
    // steps[7]:  inner x array step
    // steps[8]:  inner output array step
    char *px = args[0];
    char *plowthresh = args[1];
    char *phighthresh = args[2];
    char *plowval = args[3];
    char *phighval = args[4];
    char *pinit = args[5];
    char *pout = args[6];
    npy_intp nloops = dimensions[0];

    for (int j = 0; j < nloops; ++j, px += steps[0],
                                     plowthresh += steps[1],
                                     phighthresh += steps[2],
                                     plowval += steps[3],
                                     phighval += steps[4],
                                     pinit += steps[5],
                                     pout += steps[6]) {
        @ctype@ low_threshold = *((@ctype@ *) plowthresh);
        @ctype@ high_threshold = *((@ctype@ *) phighthresh);
        @ctype@ low_value = *((@ctype@ *) plowval);
        @ctype@ high_value = *((@ctype@ *) phighval);
        @ctype@ init = *((@ctype@ *) pinit);
        for (int k = 0; k < dimensions[1]; ++k) {
            @ctype@ x = ((@ctype@ *) px)[k];
            if (x < low_threshold) {
                ((@ctype@ *) pout)[k] = low_value;
            }
            else if (x > high_threshold) {
                ((@ctype@ *) pout)[k] = high_value;            
            }
            else {
                if (k == 0) {
                    ((@ctype@ *) pout)[k] = init;
                }
                else {
                    ((@ctype@ *) pout)[k] = ((@ctype@ *) pout)[k-1];               
                }
            }
        }
    }
}

/**end repeat**/


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc configuration data.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// These are the input and return dtypes of hysteresis_relay.
static char types[] = {
    NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT, NPY_FLOAT,
    NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE, NPY_DOUBLE,
    NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE, NPY_LONGDOUBLE
};

PyUFuncGenericFunction hysteresis_relay_funcs[] = {
    &hysteresis_relay_float_loop,
    &hysteresis_relay_double_loop,
    &hysteresis_relay_longdouble_loop
};

static void *hysteresis_relay_data[sizeof(hysteresis_relay_funcs)/sizeof(hysteresis_relay_funcs[0])];


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Python extension module definitions.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

static PyMethodDef HysteresisRelayMethods[] = {
        {NULL, NULL, 0, NULL}
};

static struct PyModuleDef moduledef = {
    PyModuleDef_HEAD_INIT,
    .m_name = "_hysteresis_relay",
    .m_doc = "Module that defines the hysteresis_relay function.",
    .m_size = -1,
    .m_methods = HysteresisRelayMethods
};


#define HYSTERESIS_RELAY_DOCSTRING \
"hysteresis_relay(x, low_threshold, high_threshold, low_value, high_value, init)\n" \
"\n"                                                        \
"Pass x through a 'relay' with hysteresis.\n"               \
"\n"                                                        \
"Parameters\n"                                              \
"----------\n"                                              \
"x : array_like\n"                                          \
"    Input signal\n"                                        \
"low_threshold : scalar\n"                                  \
"    Low end of hysteresis interval.\n"                     \
"high_threshold : scalar\n"                                 \
"    High end of the hysteresis interval.\n"                \
"low_value : scalar\n"                                      \
"    Output value for x < low_threshold.\n"                 \
"high_value : scalar\n"                                     \
"    Outout value for x > high_threshold.\n"                \
"init : scalar\n"                                           \
"    Initial output value if the initial value of x is\n"   \
"    between low_threshold and high_threshold.  Normally\n" \
"    this would be either low_value or high_value, but\n"   \
"    the function does not require it.\n"                   \
"\n"                                                        \
"Returns\n"                                                 \
"-------\n"                                                 \
"out : ndarray\n"                                           \
"    Output of the relay.\n"                                \
"\n"                                                        \
"Notes\n"                                                   \
"-----\n"                                                   \
"The function expects ``low_threshold <= high_threshold``.\n"\
"It does not check that this condition is satisifed.\n"     \
"\n"                                                        \
"Examples\n"                                                \
"--------\n"                                                \
">>> x = np.array([-1, -0.75, -0.5, -0.25, 0, 0.25, 0.5])\n"\
" TO DO...\n"                                               \
"\n"

PyMODINIT_FUNC PyInit__hysteresis_relay(void)
{
    PyObject *m;
    PyUFuncObject *hysteresis_relay_gufunc;
    PyObject *d;
    size_t ntypes;
    int nin, nout;

    m = PyModule_Create(&moduledef);
    if (!m) {
        return NULL;
    }

    import_array();
    import_umath();

    // Create the hysteresis_relay ufunc.
    ntypes = sizeof(hysteresis_relay_funcs) / sizeof(hysteresis_relay_funcs[0]);
    nin = 6;
    nout = 1;
    hysteresis_relay_gufunc = (PyUFuncObject *) PyUFunc_FromFuncAndDataAndSignature(
                            hysteresis_relay_funcs, hysteresis_relay_data, types, ntypes, nin, nout,
                            PyUFunc_None, "hysteresis_relay",
                            HYSTERESIS_RELAY_DOCSTRING, 0,
                            "(i),(),(),(),(),()->(i)");

    d = PyModule_GetDict(m);
    PyDict_SetItemString(d, "hysteresis_relay", (PyObject *) hysteresis_relay_gufunc);
    Py_DECREF(hysteresis_relay_gufunc);

    return m;
}
