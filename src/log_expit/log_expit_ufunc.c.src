//
// log_expit_gufunc.c.src
//
// ufunc implementation log_expit
// (logarithm of the logistic sigmoid function)
//

#define PY_SSIZE_T_CLEAN
#include "Python.h"

#include <stddef.h>
#include <stdint.h>
#include <math.h>

#define NPY_NO_DEPRECATED_API NPY_API_VERSION
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"


/**begin repeat
 * #typename      = float, double, longdouble  #
 * #ctype         = float, double, long double #
 * #char          =     f,       ,           l #
 */

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc inner loops for floating point types.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

//
// The logarithm of the logistic sigmoid function.
// In SciPy, the logistic sigmoid function is implemented
// in scipy.special.expit.
//
static @ctype@
log_expit_@typename@(@ctype@ x)
{
    if (x < 0.0) {
        return x - log1p@char@(exp(x));
    }
    else {
        return -log1p@char@(exp@char@(-x));
    }
}

static void
log_expit_@typename@_loop(char **args, const npy_intp *dimensions,
                         const npy_intp* steps, void* data)
{
    // args[0]: pointer to x array
    // args[1]: pointer to output array
    // dimensions[0]: Length of each array
    // steps[0]:  x array step
    // steps[1]:  output array step
    char *px = args[0];
    char *pout = args[1];
    npy_intp n = dimensions[0];

    for (int j = 0; j < n; ++j, px += steps[0], pout += steps[1]) {
        @ctype@ x = *((@ctype@ *) px);
        *((@ctype@ *) pout) = log_expit_@typename@(x);
    }
}

/**end repeat**/


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// ufunc configuration data.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

static char types[] = {
    NPY_FLOAT,      NPY_FLOAT,
    NPY_DOUBLE,     NPY_DOUBLE,
    NPY_LONGDOUBLE, NPY_LONGDOUBLE
};

static PyUFuncGenericFunction log_expit_funcs[] = {
    (PyUFuncGenericFunction) &log_expit_float_loop,
    (PyUFuncGenericFunction) &log_expit_double_loop,
    (PyUFuncGenericFunction) &log_expit_longdouble_loop
};

static void *log_expit_data[sizeof(log_expit_funcs)/sizeof(log_expit_funcs[0])];


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Python extension module definitions.
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

static PyMethodDef LogExpitMethods[] = {
        {NULL, NULL, 0, NULL}
};

static struct PyModuleDef moduledef = {
    PyModuleDef_HEAD_INIT,
    .m_name = "_log_expit",
    .m_doc = "Module that defines the function log_expit.",
    .m_size = -1,
    .m_methods = LogExpitMethods
};


#define LOG_EXPIT_DOCSTRING \
"log_expit(x, /, ...)\n"                                                \
"\n"                                                                    \
"Compute the logarithm of the logistic sigmoid function.\n"             \
"\n"                                                                    \
"The name `expit` is taken from SciPy, where `scipy.special.expit`\n"   \
"implements the logistic sigmoid function.\n"                           \
"\n"                                                                    \
"Parameters\n"                                                          \
"----------\n"                                                          \
"x : array_like\n"                                                      \
"    Input values\n"                                                    \
"\n"                                                                    \
"Returns\n"                                                             \
"-------\n"                                                             \
"out : ndarray\n"                                                       \
"    The computed values.\n"                                            \
"\n"                                                                    \
"Examples\n"                                                            \
"--------\n"                                                            \
">>> import numpy as np\n"                                              \
">>> from ufunclab import log_expit\n"                                  \
"\n"                                                                    \
">>> log_expit([-3.0, 0.25, 2.5, 5.0])\n"                               \
"array([-3.04858735, -0.57593942, -0.07888973, -0.00671535])\n"         \
"\n"                                                                    \
"Large negative values:\n"                                              \
"\n"                                                                    \
">>> log_expit([-100, -500, -1000])\n"                                  \
"array([ -100.,  -500., -1000.])\n"                                     \
"\n"                                                                    \
"Large positive values:\n"                                              \
"\n"                                                                    \
">>> log_expit([25, 100, 400])\n"                                       \
"array([-1.38879439e-011, -3.72007598e-044, -1.91516960e-174])\n"       \
"\n"


PyMODINIT_FUNC PyInit__log_expit(void)
{
    PyObject *module;
    PyUFuncObject *log_expit_gufunc;
    size_t ntypes;
    int nin, nout;
    int status;

    module = PyModule_Create(&moduledef);
    if (!module) {
        return NULL;
    }

    import_array();
    import_umath();

    // Create the log_expit ufunc.
    ntypes = sizeof(log_expit_funcs) / sizeof(log_expit_funcs[0]);
    nin = 1;
    nout = 1;
    log_expit_gufunc = (PyUFuncObject *) PyUFunc_FromFuncAndData(
                            log_expit_funcs, log_expit_data, types, ntypes, nin, nout,
                            PyUFunc_None, "log_expit",
                            LOG_EXPIT_DOCSTRING, 0);
    if (log_expit_gufunc == NULL) {
        Py_DECREF(module);
        return NULL;
    }
    status = PyModule_AddObject(module, "log_expit", (PyObject *) log_expit_gufunc);
    if (status == -1) {
        Py_DECREF(log_expit_gufunc);
        Py_DECREF(module);
        return NULL;
    }

    return module;
}
